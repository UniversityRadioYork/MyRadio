"""
Bind an object field to a class or method. This shouldn't be used externally and is only used within the schema defition.
Use cases:
1. Inside Query (and eventually Mutation) (needs both class and method)
2. On a field that can't be resolved by the name munging rules (needs method)
"""
directive @bind(
    """
    The class that we're binding to. It should be a fully qualified class name, prefixed with a backslash (\\).
    """
    class: String,
    """
    The method that we're binding to
    """
    method: String
) on FIELD_DEFINITION | OBJECT

"""
Override authorisation requirements for a field. This shouldn't be used externally and is only used within the schema defition.

If set on an object, overrides all authentication on that object, unless a field also has @auth.
"""
directive @auth(
    """
    The AUTH_XXX constants that will grant access to this method. Note that this uses OR logic, not AND, so any of them
    will grant access.
    """
    constants: [String!],
    """
    Use a custom authentication hook to authenticate this field.
    """
    hook: String
) on FIELD_DEFINITION | OBJECT

"""
Tells the resolver that the given property is not on the object itself, but on its metadata
"""
directive @meta(key: String!) on FIELD_DEFINITION

"""
An RFC3339 date string, such as 2007-12-03
"""
scalar Date
"""
An RFC3339 time string, such as 10:15:30Z.
"""
scalar Time
"""
An RFC3339 date-time string, such as 2007-12-03T10:15:30Z.
"""
scalar DateTime

"""
A time duration, such as 01:00:00
"""
scalar Duration

"""
Equivalent to a string for all intents and purposes, but used to signal that it may contain arbitrary HTML.
"""
scalar HTMLString

interface Node {
    id: ID!
}

type User implements Node {
    id: ID! @bind(method: "getID")
    fname: String! @bind(method: "getFName")
    sname: String! @bind(method: "getSName")
}

type ShowSubtype implements Node {
    id: ID!
    name: String!
    class: String!
    description: String
}

type ShowCredit {
    type: String
    User: User
}

type Show implements Node @auth(hook: "shows") {
    id: ID!
    title: String! @meta(key: "title")
    description: HTMLString! @meta(key: "description")
    subtype: ShowSubtype!
    photo: String @bind(method: "getShowPhoto")
    credits: [ShowCredit]
    allSeasons: [Season]
}

union PotentialFirstTime = Boolean | DateTime

type Season implements Node {
    id: ID!
    show: Show!
    subtype: ShowSubtype!
    seasonNumber: Int!
    timeslots: [Timeslot]
    firstTime: PotentialFirstTime
}

type Message {
    read: Boolean!
    time: DateTime!
    id: ID!
    type: Int # TODO: make this an enum
    title: String
    body: String
    source: String
    location: [String]
}

type Timeslot implements Node {
    id: ID!
    season: Season!
    timeslotNumber: Int!
    startTime: DateTime!
    endTime: DateTime!
    duration: Duration!
    messages: [Message]
    webpage: String!
}

type Quote implements Node {
    id: ID!
    source: User! @auth(constants: [])
    date: Date!
    text: HTMLString!
}

type Query {
    node(id: ID): Node

    allQuotes: [Quote!] @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_Quote", method: "getAll")

    show(itemid: Int!): Show @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_Show", method: "getInstance")
    season(itemid: Int!): Season @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_Season", method: "getInstance")
    timeslot(itemid: Int!): Timeslot @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_Timeslot", method: "getInstance")
}

schema {
    query: Query
}
