"""
Bind an object field to a class or method. This shouldn't be used externally and is only used within the schema defition.
Use cases:
1. Inside Query (and eventually Mutation) (needs both class and method)
2. On a field that can't be resolved by the name munging rules (needs method)
"""
directive @bind(
    """
    The class that we're binding to. It should be a fully qualified class name, prefixed with a backslash (\\).
    """
    class: String,
    """
    The method that we're binding to
    """
    method: String
) on FIELD_DEFINITION | OBJECT

"""
Override authorisation requirements for a field. This shouldn't be used externally and is only used within the schema defition.
"""
directive @auth(
    """
    The AUTH_XXX constants that will grant access to this method. Note that this uses OR logic, not AND, so any of them
    will grant access.
    """
    constants: [String!]!
) on FIELD_DEFINITION

"""
An RFC3339 date string, such as 2007-12-03
"""
scalar Date
"""
An RFC3339 time string, such as 10:15:30Z.
"""
scalar Time
"""
An RFC3339 date-time string, such as 2007-12-03T10:15:30Z.
"""
scalar DateTime

"""
Equivalent to a string for all intents and purposes, but used to signal that it may contain arbitrary HTML.
"""
scalar HTMLString

interface Node {
    id: ID!
}

type User implements Node @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_User") {
    id: ID! @bind(method: "getID")
    fname: String! @bind(method: "getFName")
    sname: String! @bind(method: "getSName")
}

type Quote implements Node @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_Quote") {
    id: ID!
    source: User!
    date: Date!
    text: HTMLString!
}

type Query {
    node(id: ID): Node

    allQuotes: [Quote!]! @bind(class: "\\MyRadio\\ServiceAPI\\MyRadio_Quote", method: "getAll")
}

schema {
    query: Query
}
