#!/usr/local/bin/python3
'''
This Python script implements the checkpassword interface, as defined at
http://cr.yp.to/checkpwd/interface.html

This interface is a compatible authentication method for Dovecot and any other
IMAP system, but will verify against their MyRadio credentials.

This only succeeds if the user has a local_name set.

Code is based on a mixture of
https://github.com/korylprince/dovecot-checkpassword-ldap and
https://github.com/UniversityRadioYork/mixclouder

@todo Is account locked?
'''
import sys
import os
import requests
import logging
import configparser
from traceback import print_exc


def NOAUTH():
    sys.exit(1)


def NOEXIST():
    sys.exit(3)


def ERROR():
    sys.exit(111)


def write_demo_config(conffile):
    conf = configparser.RawConfigParser()
    conf.add_section("checkpassword")
    conf.set("checkpassword", "myradio_api_key", "apikeygoeshere")
    conf.set("checkpassword", "myradio_url", "https://mydomain.fm/api/")
    conf.set("checkpassword", "mail_user", "mailaccess")
    conf.set("checkpassword", "mail_base", "/home/mboxes")
    conf.write(conffile)


def myradio_api_request(url, payload=None):
    if payload is None:
        payload = {}

    url = url + '?api_key=' + config.get("checkpassword", "myradio_api_key")
    reqpost = requests.post(config.get("checkpassword", "myradio_url") + url,
                            data=payload)
    reqjson = reqpost.json()

    if reqjson['status'] == 'OK':
        return reqjson['payload']
    elif reqjson['status'] == 403:
        logging.error("Server returned error 403 - The API key "
                      "provided does not have access to the method %s", url)
        ERROR()
    elif reqjson['status'] == 401:
        logging.error("Server returned error 401 - No api key provided")
        ERROR()
    else:
        logging.error("Server returned status %s", reqjson['status'])
        logging.error(reqpost.text)
        ERROR()


class User(object):
    def __init__(self, user, domain, passwd):
        # MyRadio doesn't use domain.
        data = myradio_api_request('v2/auth/testcredentials', {
            'user': user,
            'pass': passwd,
            'mixins': 'personal_data'
        })

        if not data or not data['local_name']:
            NOAUTH()
        else:
            os.environ['USER'] = data['local_name']
            os.environ['HOME'] = config.get("checkpassword", "mail_base")
            os.environ['userdb_uid'] = config.get("checkpassword", "mail_user")
            os.environ['userdb_gid'] = config.get("checkpassword", "mail_user")
            # Could add quotas here with userdb_quota_rule
            os.environ['EXTRA'] = 'userdb_uid userdb_gid'
            print(sys.argv[1])
            os.system(sys.argv[1])

config = configparser.RawConfigParser()
config.read(os.path.dirname(os.path.abspath(__file__)) + '/checkpassword.conf')

try:
    data = os.fdopen(3)
    inputData = data.read(512).split("\0")
except OSError:
    logging.warn("No checkpassword input data. Using Environ variables.")

try:
    user = os.environ['AUTH_USERNAME']
except KeyError:
    user = inputData[0]
try:
    domain = os.environ['AUTH_DOMAIN']
except KeyError:
    domain = '*'
try:
    passwd = os.environ['AUTH_PASSWORD']
except KeyError:
    passwd = inputData[1]

try:
    User(user, domain, passwd)
except SystemExit:
    raise
except:
    with open('/tmp/err.log', 'a') as f:
        print_exc(file=f)
    ERROR()
